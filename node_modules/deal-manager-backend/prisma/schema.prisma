// schema.prisma

// ---------- Client & DB ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum Role {
  ADMIN
  MANAGER
  BUSINESS_DEVELOPER
  GUEST
}

// ---------- ModÃ¨les ----------
model User {
  id           String  @id @default(cuid())
  email        String  @unique
  passwordHash String
  name         String?
  role         Role    @default(GUEST)
  isActive     Boolean @default(true)

  // Relations
  deals              Deal[]             @relation("UserDeals")
  visits             Visit[]            @relation("UserVisits")
  pipes              Pipe[]             @relation("UserPipes")
  objectives         Objective[]
  objectiveHistories ObjectiveHistory[]
  histories          DealHistory[]      @relation("UserDealHistories")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Deal {
  id String @id @default(cuid())

  // Champs mÃ©tier
  projet       String
  client       String
  secteur      String
  dateCreation DateTime @default(now())
  typeDeal     String?
  commercial   String?
  supportAV    String?
  semestre     String
  ca           Float    @default(0)
  marge        Float    @default(0)
  statut       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ðŸ”´ Relations avec ownership (OPTIONNEL au dÃ©but)
  ownerId String?
  owner   User?   @relation("UserDeals", fields: [ownerId], references: [id], onDelete: SetNull)

  histories DealHistory[]
  visits    Visit[]
  
  @@index([ownerId])
  @@index([semestre])
}

model DealHistory {
  id     String @id @default(cuid())
  dealId String
  deal   Deal   @relation(fields: [dealId], references: [id], onDelete: Cascade)

  changedById String?
  changedBy   User?   @relation("UserDealHistories", fields: [changedById], references: [id], onDelete: SetNull)

  changedAt DateTime @default(now())
  diff      Json
}

enum VisitStatus {
  PLANNED
  DONE
  CANCELED
}

model Visit {
  id String @id @default(cuid())

  // Champs mÃ©tier
  date          DateTime
  type          String
  semestre      String
  client        String
  secteur       String
  sujet         String
  accompagnants String?
  status        VisitStatus @default(PLANNED)  // ðŸ”´ GARDER ce champ !

  // Relations optionnelles
  dealId String?
  deal   Deal?   @relation(fields: [dealId], references: [id], onDelete: SetNull)

  // ðŸ”´ Ownership (OPTIONNEL au dÃ©but, nommÃ© "UserVisits")
  userId String?
  user   User?   @relation("UserVisits", fields: [userId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
  @@index([semestre])
}

model Pipe {
  id       String  @id @default(cuid())
  client   String
  ic       String
  secteur  String
  projets  String?
  budget   Float   @default(0)
  semestre String?

  // ðŸ”´ Ownership (OPTIONNEL au dÃ©but)
  ownerId String?
  owner   User?   @relation("UserPipes", fields: [ownerId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([ownerId])
  @@index([semestre])
}

// ---------- OBJECTIVES ----------
model Objective {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  period    String
  ca        Float
  marge     Float
  visites   Int
  one2one   Int
  workshops Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, period])
  @@index([userId])
}

// ---------- Historiques d'objectifs ----------
model ObjectiveHistory {
  id     String   @id @default(cuid())
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  period String

  // snapshot des valeurs
  values Json

  // auteur du snapshot
  by String

  ts DateTime @default(now())
  
  @@index([userId, period])
}