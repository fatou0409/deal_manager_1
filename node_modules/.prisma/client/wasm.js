
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.0
 * Query Engine version: c0aafc03b8ef6cdced8654b9a817999e02457d6a
 */
Prisma.prismaVersion = {
  client: "6.17.0",
  engine: "c0aafc03b8ef6cdced8654b9a817999e02457d6a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  name: 'name',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DealScalarFieldEnum = {
  id: 'id',
  projet: 'projet',
  client: 'client',
  secteur: 'secteur',
  dateCreation: 'dateCreation',
  typeDeal: 'typeDeal',
  commercial: 'commercial',
  supportAV: 'supportAV',
  semestre: 'semestre',
  ca: 'ca',
  marge: 'marge',
  statut: 'statut',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ownerId: 'ownerId'
};

exports.Prisma.VisitScalarFieldEnum = {
  id: 'id',
  date: 'date',
  type: 'type',
  semestre: 'semestre',
  client: 'client',
  secteur: 'secteur',
  sujet: 'sujet',
  accompagnants: 'accompagnants',
  dealId: 'dealId',
  userId: 'userId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PipeScalarFieldEnum = {
  id: 'id',
  client: 'client',
  ic: 'ic',
  secteur: 'secteur',
  projets: 'projets',
  budget: 'budget',
  semestre: 'semestre',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.ObjectiveScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  period: 'period',
  ca: 'ca',
  marge: 'marge',
  visites: 'visites',
  one2one: 'one2one',
  workshops: 'workshops',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ObjectiveHistoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  period: 'period',
  values: 'values',
  by: 'by',
  ts: 'ts'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  BUSINESS_DEVELOPER: 'BUSINESS_DEVELOPER',
  GUEST: 'GUEST'
};

exports.DealStatus = exports.$Enums.DealStatus = {
  DRAFT: 'DRAFT',
  OPEN: 'OPEN',
  WON: 'WON',
  LOST: 'LOST'
};

exports.VisitStatus = exports.$Enums.VisitStatus = {
  PLANNED: 'PLANNED',
  DONE: 'DONE',
  CANCELED: 'CANCELED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Deal: 'Deal',
  Visit: 'Visit',
  Pipe: 'Pipe',
  Objective: 'Objective',
  ObjectiveHistory: 'ObjectiveHistory'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\USER\\Downloads\\DealsManager\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\USER\\Downloads\\DealsManager\\backend\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../backend/.env"
  },
  "relativePath": "../../../backend/prisma",
  "clientVersion": "6.17.0",
  "engineVersion": "c0aafc03b8ef6cdced8654b9a817999e02457d6a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "sqlite",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// ---------- Client & DB ----------\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// ---------- Enums ----------\nenum Role {\n  ADMIN\n  MANAGER\n  BUSINESS_DEVELOPER\n  GUEST\n}\n\nenum DealStatus {\n  DRAFT\n  OPEN\n  WON\n  LOST\n}\n\nenum VisitStatus {\n  PLANNED\n  DONE\n  CANCELED\n}\n\n// ---------- Modèles ----------\nmodel User {\n  id           String  @id @default(cuid())\n  email        String  @unique\n  passwordHash String\n  name         String?\n  role         Role    @default(GUEST)\n  isActive     Boolean @default(true)\n\n  // Relations\n  deals              Deal[]             @relation(\"UserDeals\")\n  visits             Visit[]\n  objectives         Objective[]\n  objectiveHistories ObjectiveHistory[]\n  pipes              Pipe[] // ✅ Relation avec Pipe\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\nmodel Deal {\n  id String @id @default(cuid())\n\n  // ✅ Champs \"FR\" alignés avec le front\n  projet       String\n  client       String\n  secteur      String\n  dateCreation DateTime @default(now())\n  typeDeal     String?\n  commercial   String?\n  supportAV    String?\n  semestre     String\n  ca           Float    @default(0)\n  marge        Float    @default(0)\n  statut       String\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relations (optionnelles)\n  ownerId String?\n  owner   User?   @relation(\"UserDeals\", fields: [ownerId], references: [id])\n\n  visits Visit[]\n}\n\nmodel Visit {\n  id String @id @default(cuid())\n\n  // ✅ Aligné sur le front \"Nouvelle visite\"\n  date          DateTime\n  type          String\n  semestre      String\n  client        String\n  secteur       String\n  sujet         String\n  accompagnants String?\n\n  // (Relation au deal non utilisée par le front → on la laisse optionnelle)\n  dealId String?\n  deal   Deal?   @relation(fields: [dealId], references: [id])\n\n  // (Relation user optionnelle)\n  userId String?\n  user   User?   @relation(fields: [userId], references: [id])\n\n  status VisitStatus @default(PLANNED)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\n// ---------- PIPE (Table simplifiée avec 5 champs uniquement) ----------\nmodel Pipe {\n  id String @id @default(cuid())\n\n  // ✅ Les 5 champs requis de la table Pipe\n  client  String // 1. Client\n  ic      String // 2. IC (Ingénieur Commercial)\n  secteur String // 3. Secteur\n  projets String? // 4. Projets en vue (optionnel)\n  budget  Float   @default(0) // 5. Budget estimatif (CFA)\n\n  // Champ de filtrage\n  semestre String\n\n  // Métadonnées automatiques\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relation optionnelle avec User\n  userId String?\n  user   User?   @relation(fields: [userId], references: [id])\n}\n\n// ---------- OBJECTIVES (alignés front) ----------\nmodel Objective {\n  id String @id @default(cuid())\n\n  // ⇐ relation opposée de User.objectives\n  userId String\n  user   User   @relation(fields: [userId], references: [id])\n\n  period    String\n  ca        Float\n  marge     Float\n  visites   Int\n  one2one   Int\n  workshops Int\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Pas de name=... pour exposer where: { userId_period: { ... } }\n  @@unique([userId, period])\n}\n\n// ---------- Historiques d'objectifs ----------\nmodel ObjectiveHistory {\n  id     String @id @default(cuid())\n  userId String\n  user   User   @relation(fields: [userId], references: [id])\n  period String\n\n  // snapshot des mêmes champs que l'écran du front\n  // { ca: number, marge: number, visites: number, one2one: number, workshops: number }\n  values Json\n\n  // auteur du snapshot (id ou email)\n  by String\n\n  ts DateTime @default(now())\n}\n",
  "inlineSchemaHash": "78e70464ef071f7e1cc12a5bea0c09179e7ba4a8f89411d7a129382bfcd593c9",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"deals\",\"kind\":\"object\",\"type\":\"Deal\",\"relationName\":\"UserDeals\"},{\"name\":\"visits\",\"kind\":\"object\",\"type\":\"Visit\",\"relationName\":\"UserToVisit\"},{\"name\":\"objectives\",\"kind\":\"object\",\"type\":\"Objective\",\"relationName\":\"ObjectiveToUser\"},{\"name\":\"objectiveHistories\",\"kind\":\"object\",\"type\":\"ObjectiveHistory\",\"relationName\":\"ObjectiveHistoryToUser\"},{\"name\":\"pipes\",\"kind\":\"object\",\"type\":\"Pipe\",\"relationName\":\"PipeToUser\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Deal\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"projet\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"client\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"secteur\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dateCreation\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"typeDeal\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"commercial\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"supportAV\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"semestre\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ca\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"marge\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"statut\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"ownerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"owner\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserDeals\"},{\"name\":\"visits\",\"kind\":\"object\",\"type\":\"Visit\",\"relationName\":\"DealToVisit\"}],\"dbName\":null},\"Visit\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"semestre\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"client\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"secteur\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sujet\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accompagnants\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dealId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"deal\",\"kind\":\"object\",\"type\":\"Deal\",\"relationName\":\"DealToVisit\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToVisit\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"VisitStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Pipe\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"client\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ic\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"secteur\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"projets\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"budget\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"semestre\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PipeToUser\"}],\"dbName\":null},\"Objective\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ObjectiveToUser\"},{\"name\":\"period\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ca\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"marge\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"visites\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"one2one\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"workshops\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"ObjectiveHistory\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ObjectiveHistoryToUser\"},{\"name\":\"period\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"values\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"by\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ts\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

